package concesionario.model;

import java.util.ArrayList;
import concesionario.model.Vehiculo;
import concesionario.exceptions.ClienteException;
import concesionario.exceptions.EmpleadoException;
import concesionario.exceptions.VehiculoException;

import java.util.ArrayList;

public class Empleado {
    private String nombre;
    private String apellido;
    private String usuario;
    private String contrasenia;
    private String idEmpleado;
    private String correoElectronico;
    private String respuestaSeguridad;
    private ArrayList<Vehiculo> listaVehiculos;
    private ArrayList<Cliente> listaClientes;
    private ArrayList<Transaccion> listaTransacciones;

    public Empleado(String nombre, String apellido, String usuario, String contrasenia, String idEmpleado,
                    String correoElectronico, String respuestaSeguridad) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.usuario = usuario;
        this.contrasenia = contrasenia;
        this.idEmpleado = idEmpleado;
        this.correoElectronico = correoElectronico;
        this.respuestaSeguridad = respuestaSeguridad;
        this.listaVehiculos = new ArrayList<Vehiculo>();
        this.listaClientes = new ArrayList<Cliente>();
        this.listaTransacciones = new ArrayList<Transaccion>();
    }

    public void registrarVehiculo(Vehiculo vehiculo) {
        listaVehiculos.add(vehiculo);
    }

    public void registrarCliente(Cliente cliente) {
        listaClientes.add(cliente);
    }

    public void alquilarVehiculo(Cliente cliente, Vehiculo vehiculo) {
        // Código para alquilar vehículo a cliente
    }

    public void venderVehiculo(Cliente cliente, Vehiculo vehiculo) {
        // Código para vender vehículo a cliente
    }

    public void comprarVehiculo(Cliente cliente, Vehiculo vehiculo) {
        // Código para comprar vehículo a cliente
    }

    public void registrarTransaccion(Transaccion transaccion) {
        listaTransacciones.add(transaccion);
    }

    // Métodos getters y setters para todos los atributos

}


	// CRUD VEHICULO
	public String registroVehiculo(String marca, boolean esNuevo, String modelo, int cambios,
			TipoTransmision tipoTransmision, TipoCombustible tipoCombustible, int velocidadMaxima, int cilindraje,
			boolean aireAcondicionado, int nPuertas, boolean camaraReversa, int nBolsasDeAire, int nPasajeros,
			boolean abs, String numeroChasis) throws EmpleadoException {
		String mensaje = "El vehiculo ha sido registrado";
		String accion = mensaje+ " Y sera para la venta";
		Vehiculo nuevoVehiculo = new Vehiculo(marca, esNuevo, modelo, cambios, tipoTransmision, tipoCombustible,
				velocidadMaxima, cilindraje, aireAcondicionado, nPuertas, camaraReversa, nBolsasDeAire, nPasajeros, abs,
				numeroChasis);
		listaVehiculos.add(nuevoVehiculo);
		if (esNuevo == false) {
			accion = mensaje + " Y sera para alquilar";
		}
		return accion;
	}

	public Vehiculo obtenerVehiculo(String numeroChasis) {
		Vehiculo vehiculoEncontrado = null;
		for (Vehiculo vehiculo : listaVehiculos) {
			if (vehiculo.getNumeroChasis().equals(numeroChasis)) {
				vehiculoEncontrado = vehiculo;
			}
		}
		return vehiculoEncontrado;
	}

	public void eliminarVehiculo(String numeroChasis) throws VehiculoException {
		Vehiculo vehiculoEncontrado = obtenerVehiculo(numeroChasis);
		if (vehiculoEncontrado == null) {
			throw new VehiculoException("El Vehiculo no esta registrado");
		}
		listaVehiculos.remove(vehiculoEncontrado);
	}

	public String actualizarVehiculo(String marca, boolean esNuevo, String modelo, int cambios,
			TipoTransmision tipoTransmision, TipoCombustible tipoCombustible, int velocidadMaxima, int cilindraje,
			boolean aireAcondicionado, int nPuertas, boolean camaraReversa, int nBolsasDeAire, int nPasajeros,
			boolean abs, String numeroChasis) throws VehiculoException {
		Vehiculo vehiculoEncontrado = obtenerVehiculo(numeroChasis);
		if (vehiculoEncontrado == null) {
			throw new VehiculoException("El vehiculo no se encuentra registrado");
		}
		vehiculoEncontrado.setNumeroChasis(marca);
		vehiculoEncontrado.setEsNuevo(esNuevo);
		vehiculoEncontrado.setModelo(modelo);
		vehiculoEncontrado.setCambios(cambios);
		vehiculoEncontrado.setTipoTransmision(tipoTransmision);
		vehiculoEncontrado.setTipoCombustible(tipoCombustible);
		vehiculoEncontrado.setVelocidadMaxima(velocidadMaxima);
		vehiculoEncontrado.setCilindraje(cilindraje);
		vehiculoEncontrado.setAireAcondicionado(aireAcondicionado);
		vehiculoEncontrado.setnPuertas(nPuertas);
		vehiculoEncontrado.setCamaraReversa(camaraReversa);
		vehiculoEncontrado.setnBolsasDeAire(nBolsasDeAire);
		vehiculoEncontrado.setnPasajeros(nPasajeros);
		vehiculoEncontrado.setAbs(abs);
		vehiculoEncontrado.setNumeroChasis(numeroChasis);
		return "El vehiculo ha sido actualizado";
	}

	public String registrarClientes(String nombre, String apellido, String usuario, String contrasena,
			String correoElectronico, String identificacion) throws EmpleadoException {

		String mensaje = "El cliente ha sido registrado";
		boolean ClienteEncontrado = verificarCliente(identificacion);
		if (ClienteEncontrado == true) {
			throw new EmpleadoException("El cliente ya existe");
		} else {
			Cliente nuevoCliente = new Cliente(nombre, apellido, usuario, contrasena, correoElectronico,
					identificacion);
			listaClientes.add(nuevoCliente);
		}
		return mensaje;
	}

	private boolean verificarCliente(String identificacion) {
		for (Cliente cliente : listaClientes) {
			if (cliente.getUsuario().equals(identificacion)) {
				return true;
			}
		}
		return false;
	}

	public void eliminarCliente(String identificacion) throws ClienteException {
		Cliente clienteEncontrado = buscarCliente(identificacion);
		if (clienteEncontrado == null) {
			throw new ClienteException("El cliente no esta registrado");
		}
		listaClientes.remove(clienteEncontrado);
	}

	public Cliente buscarCliente(String identificacion) {
		Cliente clienteteEncontrado = null;
		for (Cliente cliente : listaClientes) {
			if (cliente.getUsuario().equals(identificacion)) {
				clienteteEncontrado = cliente;
			}
		}
		return clienteteEncontrado;
	}

	public String actualizarCliente(String nombre, String apellido, String usuario, String contrasena,
			String correoElectronico, String identificacion) throws Exception {
		Cliente clienteEncontrado = buscarCliente(identificacion);
		if (clienteEncontrado == null) {
			throw new EmpleadoException("El cliente no esta registrado");
		}
		clienteEncontrado.setNombre(nombre);
		clienteEncontrado.setApellido(apellido);
		clienteEncontrado.setUsuario(usuario);
		clienteEncontrado.setContrasena(contrasena);
		clienteEncontrado.setCorreoElectronico(correoElectronico);
		clienteEncontrado.setIdentificacion(identificacion);

		return " El cliente ha sido actualizado ";
	}

	public void alquilarVehiculo(String vehiculo, String cliente) {
		boolean vehiculoVerificado=verificarVehiculo(vehiculo,cliente);
			if(vehiculoVerificado==true){

			}
		System.out.println("El cliente " + cliente + " alquiló el vehículo: " + vehiculo);
	}

	private boolean verificarVehiculo(String vehiculo, String cliente) {
		// TODO Auto-generated method stub
		return false;
	}

	public void venderVehiculo(String vehiculo, String cliente) {
		// Lógica para vender un vehículo a un cliente
		System.out.println("Se vendió el vehículo: " + vehiculo + " al cliente " + cliente);
	}

	public void comprarVehiculo(String vehiculo, String cliente) {
		// Lógica para comprar un vehículo de un cliente
		System.out.println("Se compró el vehículo: " + vehiculo + " del cliente " + cliente);
	}

	public void registroTransacciones(String transaccion) {
		// Lógica para registrar una transacción
		System.out.println("Se registró la transacción: " + transaccion);
	}


	public void setCuentaBloqueada(boolean b) {
		// TODO Auto-generated method stub

	}

}
