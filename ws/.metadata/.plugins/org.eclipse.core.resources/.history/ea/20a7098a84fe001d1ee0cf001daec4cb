package concesionario.controllers;

import java.util.List;

import concesionario.model.Administrador;
import concesionario.model.Empleado;
import javafx.collections.FXCollections;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import concesionario.exceptions.EmpleadoException;

public class AdministradorController {
    private Administrador administrador;

    public AdministradorController(Administrador administrador) {
        this.administrador = administrador;
    }

    public AdministradorController() {
        this.administrador = new Administrador();
    }

    public void setAdministrador(Administrador administrador) {
        this.administrador = administrador;
    }

    public List<Empleado> getListaEmpleados() {
        return administrador.getListaEmpleados();
    }
    @FXML
    private TableView<Empleado> tableEmpleados;
    @FXML
    private TableColumn<Empleado, String> columnNombreEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnApellidosEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnIdEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnUsuarioEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnContraseniaEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnCorreoEmpleado;
    @FXML
    private TableColumn<Empleado, String> columnRespuestaSeguridadEmpleado;

    public void initialize() {
        // Configurar las celdas de la tabla
        columnNombreEmpleado.setCellValueFactory(new PropertyValueFactory<>("nombre"));
        columnApellidosEmpleado.setCellValueFactory(new PropertyValueFactory<>("apellidos"));
        columnIdEmpleado.setCellValueFactory(new PropertyValueFactory<>("idEmpleado"));
        columnUsuarioEmpleado.setCellValueFactory(new PropertyValueFactory<>("usuario"));
        columnContraseniaEmpleado.setCellValueFactory(new PropertyValueFactory<>("contrasenia"));
        columnCorreoEmpleado.setCellValueFactory(new PropertyValueFactory<>("correoElectronico"));
        columnRespuestaSeguridadEmpleado.setCellValueFactory(new PropertyValueFactory<>("respuestaSeguridad"));

        // Obtener los datos de empleados y asignarlos a la tabla
        List<Empleado> listaEmpleados = administrador.getListaEmpleados();
        tableEmpleados.setItems(FXCollections.observableArrayList(listaEmpleados));
    }


    public Empleado registrarEmpleado(String nombre, String apellido, String idEmpleado, String usuario,
            String contrasenia, String correoElectronico, String respuestaSeguridad) throws EmpleadoException {
        return administrador.registrarEmpleado(nombre, apellido, idEmpleado, usuario, contrasenia, correoElectronico,
                respuestaSeguridad);
    }

    public void actualizarEmpleado(String nombre, String apellido, String idEmpleado, String usuario,
            String contrasenia, String correoElectronico, String respuestaSeguridad) throws EmpleadoException {
        administrador.actualizarEmpleado(nombre, apellido, idEmpleado, usuario, contrasenia, correoElectronico,
                respuestaSeguridad);
    }

    public void eliminarEmpleado(String idEmpleado) throws EmpleadoException {
        administrador.eliminarEmpleado(idEmpleado);
    }

    public void bloquearEmpleado(String idEmpleado) throws EmpleadoException {
        administrador.bloquearEmpleado(idEmpleado);
    }
}
